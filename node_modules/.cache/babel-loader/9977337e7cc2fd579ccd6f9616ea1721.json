{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { createHold } from '../gameHelpers';\nexport const useHold = player => {\n  _s();\n\n  console.log(player);\n  const len = player.tetromino ? player.tetromino.length : player.length;\n  const [hold, setHold] = useState(createHold(len, len));\n  useEffect(() => {\n    const updateHold = () => {\n      //Clear hold - reset and rebuild\n      const newHold = Array(len).fill(0).map(row => new Array(len).fill([0, 'clear']));\n      console.log(player.tetromino); // const newHold = prevHold.map(row => \n      //     row.map(cell => (cell[1] === [0, 'clear']))\n      // );\n      //Draw tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newHold[y][x] = [value, 'clear'];\n          }\n        });\n      });\n      return newHold;\n    };\n\n    setHold(prev => updateHold(prev));\n  }, [player]);\n  return [hold, setHold];\n};\n\n_s(useHold, \"j4VXebf1EmHa7fFbYyoJxXcLkwk=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/useHold.js"],"names":["useState","useEffect","createHold","useHold","player","console","log","len","tetromino","length","hold","setHold","updateHold","newHold","Array","fill","map","row","forEach","y","value","x","prev"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,UAAR,QAAyB,gBAAzB;AAEA,OAAO,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAAA;;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAMG,GAAG,GAAGH,MAAM,CAACI,SAAP,GAAmBJ,MAAM,CAACI,SAAP,CAAiBC,MAApC,GAA6CL,MAAM,CAACK,MAAhE;AACA,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAACE,UAAU,CAACK,GAAD,EAAMA,GAAN,CAAX,CAA/B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,UAAU,GAAG,MAAM;AACrB;AACA,YAAMC,OAAO,GAAGC,KAAK,CAACP,GAAD,CAAL,CAAWQ,IAAX,CAAgB,CAAhB,EAAmBC,GAAnB,CAAuBC,GAAG,IAAI,IAAIH,KAAJ,CAAUP,GAAV,EAAeQ,IAAf,CAAoB,CAAC,CAAD,EAAI,OAAJ,CAApB,CAA9B,CAAhB;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACI,SAAnB,EAHqB,CAIrB;AACA;AACA;AAEA;;AACAJ,MAAAA,MAAM,CAACI,SAAP,CAAiBU,OAAjB,CAAyB,CAACD,GAAD,EAAME,CAAN,KAAY;AACjCF,QAAAA,GAAG,CAACC,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAgB;AACZP,YAAAA,OAAO,CAACM,CAAD,CAAP,CAAWE,CAAX,IAAgB,CAACD,KAAD,EAAQ,OAAR,CAAhB;AACH;AACJ,SAJD;AAKH,OAND;AAQA,aAAOP,OAAP;AACH,KAlBD;;AAoBAF,IAAAA,OAAO,CAACW,IAAI,IAAIV,UAAU,CAACU,IAAD,CAAnB,CAAP;AACH,GAtBQ,EAsBN,CAAClB,MAAD,CAtBM,CAAT;AAwBA,SAAO,CAACM,IAAD,EAAOC,OAAP,CAAP;AACH,CA9BM;;GAAMR,O","sourcesContent":["import {useState, useEffect} from 'react';\nimport {createHold} from '../gameHelpers';\n\nexport const useHold = (player) => {\n    console.log(player);\n    const len = player.tetromino ? player.tetromino.length : player.length;\n    const[hold, setHold] = useState(createHold(len, len));\n\n    useEffect(() => {\n        const updateHold = () => {\n            //Clear hold - reset and rebuild\n            const newHold = Array(len).fill(0).map(row => new Array(len).fill([0, 'clear']))\n            console.log(player.tetromino);\n            // const newHold = prevHold.map(row => \n            //     row.map(cell => (cell[1] === [0, 'clear']))\n            // );\n\n            //Draw tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0){\n                        newHold[y][x] = [value, 'clear']; \n                    }\n                });\n            });\n\n            return newHold;\n        };\n\n        setHold(prev => updateHold(prev))\n    }, [player]);\n\n    return [hold, setHold]; \n}"]},"metadata":{},"sourceType":"module"}