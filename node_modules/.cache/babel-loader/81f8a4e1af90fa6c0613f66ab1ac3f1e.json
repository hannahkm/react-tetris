{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { createHold } from '../gameHelpers';\nexport const useHold = player => {\n  _s();\n\n  console.log(player);\n  const [hold, setHold] = useState(createHold(player.tetromino.length, player.tetromino.length));\n  useEffect(() => {\n    const updateHold = () => {\n      //Clear hold - reset and rebuild\n      const newHold = Array(player.tetromino.length).fill(0).map(row => new Array(player.tetromino.length).fill([0, 'clear']));\n      console.log(player.tetromino); // const newHold = prevHold.map(row => \n      //     row.map(cell => (cell[1] === [0, 'clear']))\n      // );\n      //Draw tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newHold[y][x] = [value, 'clear'];\n          }\n        });\n      });\n      return newHold;\n    };\n\n    setHold(prev => updateHold(prev));\n  }, [player]);\n  return [hold, setHold];\n};\n\n_s(useHold, \"XtL+P+dsIJ7lkD9hR0Ee/96Cl3I=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/useHold.js"],"names":["useState","useEffect","createHold","useHold","player","console","log","hold","setHold","tetromino","length","updateHold","newHold","Array","fill","map","row","forEach","y","value","x","prev"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,UAAR,QAAyB,gBAAzB;AAEA,OAAO,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAAA;;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAK,CAACG,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAACE,UAAU,CAACE,MAAM,CAACK,SAAP,CAAiBC,MAAlB,EAA0BN,MAAM,CAACK,SAAP,CAAiBC,MAA3C,CAAX,CAA/B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,UAAU,GAAG,MAAM;AACrB;AACA,YAAMC,OAAO,GAAGC,KAAK,CAACT,MAAM,CAACK,SAAP,CAAiBC,MAAlB,CAAL,CAA+BI,IAA/B,CAAoC,CAApC,EAAuCC,GAAvC,CAA2CC,GAAG,IAAI,IAAIH,KAAJ,CAAUT,MAAM,CAACK,SAAP,CAAiBC,MAA3B,EAAmCI,IAAnC,CAAwC,CAAC,CAAD,EAAI,OAAJ,CAAxC,CAAlD,CAAhB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACK,SAAnB,EAHqB,CAIrB;AACA;AACA;AAEA;;AACAL,MAAAA,MAAM,CAACK,SAAP,CAAiBQ,OAAjB,CAAyB,CAACD,GAAD,EAAME,CAAN,KAAY;AACjCF,QAAAA,GAAG,CAACC,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAgB;AACZP,YAAAA,OAAO,CAACM,CAAD,CAAP,CAAWE,CAAX,IAAgB,CAACD,KAAD,EAAQ,OAAR,CAAhB;AACH;AACJ,SAJD;AAKH,OAND;AAQA,aAAOP,OAAP;AACH,KAlBD;;AAoBAJ,IAAAA,OAAO,CAACa,IAAI,IAAIV,UAAU,CAACU,IAAD,CAAnB,CAAP;AACH,GAtBQ,EAsBN,CAACjB,MAAD,CAtBM,CAAT;AAwBA,SAAO,CAACG,IAAD,EAAOC,OAAP,CAAP;AACH,CA7BM;;GAAML,O","sourcesContent":["import {useState, useEffect} from 'react';\nimport {createHold} from '../gameHelpers';\n\nexport const useHold = (player) => {\n    console.log(player);\n    const[hold, setHold] = useState(createHold(player.tetromino.length, player.tetromino.length));\n\n    useEffect(() => {\n        const updateHold = () => {\n            //Clear hold - reset and rebuild\n            const newHold = Array(player.tetromino.length).fill(0).map(row => new Array(player.tetromino.length).fill([0, 'clear']))\n            console.log(player.tetromino);\n            // const newHold = prevHold.map(row => \n            //     row.map(cell => (cell[1] === [0, 'clear']))\n            // );\n\n            //Draw tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0){\n                        newHold[y][x] = [value, 'clear']; \n                    }\n                });\n            });\n\n            return newHold;\n        };\n\n        setHold(prev => updateHold(prev))\n    }, [player]);\n\n    return [hold, setHold]; \n}"]},"metadata":{},"sourceType":"module"}