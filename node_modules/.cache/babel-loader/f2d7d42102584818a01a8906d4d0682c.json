{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { STAGE_WIDTH } from '../gameHelpers';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collideed: false\n  });\n\n  const rotate = (matrix, dir) => {};\n\n  const playerRotate = (stage, dir) => {};\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};\n\n_s(usePlayer, \"pVT26QjzOR7YA94J+2UmYfpXWQ0=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","STAGE_WIDTH","TETROMINOS","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collideed","rotate","matrix","dir","playerRotate","stage","updatePlayerPos","collided","prev","resetPlayer"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SAAQC,UAAR,EAAoBC,eAApB,QAA0C,eAA1C;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AACjCQ,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAE,CAAJ;AAAOC,MAAAA,CAAC,EAAE;AAAV,KAD4B;AAEjCC,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcS,KAFQ;AAGjCC,IAAAA,SAAS,EAAE;AAHsB,GAAD,CAApC;;AAMA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB,CAE/B,CAFD;;AAIA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQF,GAAR,KAAgB,CAEpC,CAFD;;AAIA,QAAMG,eAAe,GAAG,CAAC;AAACV,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOU,IAAAA;AAAP,GAAD,KAAsB;AAC1Cb,IAAAA,SAAS,CAACc,IAAI,KAAK,EACf,GAAGA,IADY;AAEfb,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAGY,IAAI,CAACb,GAAL,CAASC,CAAT,IAAcA,CAAnB;AAAuBC,QAAAA,CAAC,EAAGW,IAAI,CAACb,GAAL,CAASE,CAAT,IAAcA;AAAzC,OAFU;AAGfU,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAME,WAAW,GAAGrB,WAAW,CAAC,MAAK;AACjCM,IAAAA,SAAS,CAAC;AACNC,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAEP,WAAW,GAAC,CAAZ,GAAc,CAAlB;AAAqBQ,QAAAA,CAAC,EAAE;AAAxB,OADC;AAENC,MAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFvB;AAGNQ,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACd,MAAD,EAASa,eAAT,EAA0BG,WAA1B,CAAP;AAEH,CAjCM;;GAAMjB,S","sourcesContent":["import {useState, useCallback} from 'react';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\nimport {TETROMINOS, randomTetromino} from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collideed: false,\n    });\n\n    const rotate = (matrix, dir) => {\n\n    }\n\n    const playerRotate = (stage, dir) => {\n        \n    }\n\n    const updatePlayerPos = ({x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() =>{\n        setPlayer({\n            pos: {x: STAGE_WIDTH/2-2, y: 0},\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer];\n\n}"]},"metadata":{},"sourceType":"module"}