{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hannah/Desktop/github projects/react-tetris/src/components/Tetris.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers'; //Components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton'; //Styled Components\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'; //Custon Hooks\n\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\nconst Tetris = () => {\n  _s();\n\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n  console.log(\"re-render\");\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    //Reset game here\n    setStage(createStage());\n    setDropTime(1000); //one second\n\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  };\n\n  const drop = () => {\n    //Calculate level and increase every 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      //if Game Over:\n      if (player.pos.y < 1) {\n        console.log(\"game over!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1) + 200);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  const instantDrop = () => {\n    while (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      console.log(\"here\");\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    }\n\n    updatePlayerPos({\n      x: 0,\n      y: 0,\n      collided: true\n    });\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        //left arrow\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        //right arrow\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        //down arrow\n        dropPlayer();\n      } else if (keyCode === 38) {\n        //up arrow\n        playerRotate(stage, 1);\n      } else if (keyCode === 32) {\n        //space button\n        instantDrop();\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver ? /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: `Score: ${score}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: `Rows: ${rows}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: `Level: ${level}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tetris, \"4dLMhk0GWFQnd5Q+HqmTKcv5jRk=\", false, function () {\n  return [usePlayer, useStage, useGameStatus, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","Stage","Display","StartButton","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","useGameStatus","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","console","log","movePlayer","dir","x","y","startGame","drop","prev","collided","pos","keyUp","keyCode","dropPlayer","instantDrop","move","e"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {createStage, checkCollision} from '../gameHelpers';\n\n//Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\n//Styled Components\nimport {StyledTetrisWrapper, StyledTetris} from './styles/StyledTetris';\n\n//Custon Hooks\nimport {useInterval} from '../hooks/useInterval';\nimport {usePlayer} from '../hooks/usePlayer';\nimport {useStage} from '../hooks/useStage';\nimport {useGameStatus} from '../hooks/useGameStatus';\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n \n    console.log(\"re-render\");\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, {x: dir, y: 0})){\n            updatePlayerPos({x: dir, y: 0});\n        }\n        \n    }\n\n    const startGame = () => {\n        //Reset game here\n        setStage(createStage());\n        setDropTime(1000); //one second\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n    }\n\n    const drop = () => {\n        //Calculate level and increase every 10 rows\n        if (rows > (level + 1) * 10){\n            setLevel(prev => prev + 1);\n            setDropTime(1000/(level+1)+200);\n        }\n        if(!checkCollision(player, stage, {x: 0, y: 1})){\n            updatePlayerPos({x: 0, y: 1, collided: false});\n        } else{\n            //if Game Over:\n            if (player.pos.y < 1){\n                console.log(\"game over!\");\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({x: 0, y:0, collided: true});\n        }\n    }\n\n    const keyUp = ({keyCode}) => {\n        if (!gameOver){\n            if (keyCode === 40){\n                setDropTime(1000/(level+1)+200);\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    }\n\n    const instantDrop = () => {\n        while (!checkCollision(player, stage, {x: 0, y: 1})){\n            console.log(\"here\");\n            updatePlayerPos({x: 0, y: 1, collided: false});\n        }\n        updatePlayerPos({x: 0, y:0, collided: true});\n    }\n\n    const move = ({keyCode}) => {\n        if (!gameOver){\n            if (keyCode === 37){ //left arrow\n                movePlayer(-1);\n            } else if (keyCode === 39){ //right arrow\n                movePlayer(1);\n            } else if (keyCode === 40){ //down arrow\n                dropPlayer();\n            } else if (keyCode === 38) { //up arrow\n                playerRotate(stage, 1);\n            } else if (keyCode === 32){ //space button\n                instantDrop();\n            }\n        }\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime)\n\n    return (\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\n            <StyledTetris>\n                <Stage stage={stage}/>\n                <aside> \n                    {gameOver ? (\n                        <Display gameOver = {gameOver} text=\"Game Over\" />\n                    ) : (\n                        <div>\n                            <Display text={`Score: ${score}`}/>\n                            <Display text={`Rows: ${rows}`}/>\n                            <Display text={`Level: ${level}`}/>\n                        </div>\n                    )}\n                    <StartButton callback={startGame}/>\n                </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    )\n}\n\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}