{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hannah/Desktop/github projects/react-tetris/src/components/Tetris.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers'; //Components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton'; //Styled Components\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'; //Custon Hooks\n\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\n\nconst Tetris = () => {\n  _s();\n\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [player, updatePlayerPos, resetPlayer] = usePlayer();\n  const [stage, setStage] = useStage(player);\n  console.log(\"re-render\");\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir * 2,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    //Reset game here\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(true);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 0.5,\n        collided: false\n      });\n    } else {\n      //if Game Over:\n      if (player.pos.y < 1) {\n        console.log(\"game over!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropPlayer = () => {\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        //left arrow\n        movePlayer(-0.5);\n      } else if (keyCode === 39) {\n        //right arrow\n        movePlayer(0.5);\n      } else if (keyCode === 40) {\n        //down arrow\n        dropPlayer();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver ? /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Rows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tetris, \"gv8CXUUOPzQENoQfDldU/Vn+gek=\", false, function () {\n  return [usePlayer, useStage];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","Stage","Display","StartButton","StyledTetrisWrapper","StyledTetris","usePlayer","useStage","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","stage","setStage","console","log","movePlayer","dir","x","y","startGame","drop","collided","pos","dropPlayer","move","keyCode","e"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {createStage, checkCollision} from '../gameHelpers';\n\n//Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\n//Styled Components\nimport {StyledTetrisWrapper, StyledTetris} from './styles/StyledTetris';\n\n//Custon Hooks\nimport {usePlayer} from '../hooks/usePlayer';\nimport {useStage} from '../hooks/useStage';\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer] = usePlayer();\n    const [stage, setStage] = useStage(player);\n\n    console.log(\"re-render\");\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, {x: dir*2, y: 0})){\n            updatePlayerPos({x: dir, y: 0});\n        }\n        \n    }\n\n    const startGame = () => {\n        //Reset game here\n        setStage(createStage());\n        resetPlayer();\n        setGameOver(true);\n    }\n\n    const drop = () => {\n        if(!checkCollision(player, stage, {x: 0, y: 1})){\n            updatePlayerPos({x: 0, y: 0.5, collided: false});\n        } else{\n            //if Game Over:\n            if (player.pos.y < 1){\n                console.log(\"game over!\");\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({x: 0, y:0, collided: true});\n        }\n    }\n\n    const dropPlayer = () => {\n        drop();\n    }\n\n    const move = ({keyCode}) => {\n        if (!gameOver){\n            if (keyCode === 37){ //left arrow\n                movePlayer(-0.5);\n            } else if (keyCode === 39){ //right arrow\n                movePlayer(0.5);\n            } else if (keyCode === 40){ //down arrow\n                dropPlayer();\n            }\n        }\n    }\n\n    return (\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)}>\n            <StyledTetris>\n                <Stage stage={stage}/>\n                <aside> \n                    {gameOver ? (\n                        <Display gameOver = {gameOver} text=\"Game Over\" />\n                    ) : (\n                        <div>\n                            <Display text=\"Score\"/>\n                            <Display text=\"Rows\"/>\n                            <Display text=\"Level\"/>\n                        </div>\n                    )}\n                    <StartButton callback={startGame}/>\n                </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    )\n}\n\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}