{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, {\n  x: moveX,\n  y: moveY\n}) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // Check if the cell is 0 or filled\n      if (player.tetromino[y][x] != 0) {\n        // Check if movement is within the game's height, width, and if cell is not clear\n        if (!stage[y + player.pos.y + moveY] || !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear') {\n          return true;\n        } // Check if the cell is set to clear\n\n      } //\n\n    }\n  }\n};","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/gameHelpers.js"],"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length","pos"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAApB;AACP,OAAO,MAAMC,YAAY,GAAG,EAArB;AAEP,OAAO,MAAMC,WAAW,GAAG,MACvBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC,MAC5B,IAAIE,KAAJ,CAAUH,WAAV,EAAuBK,IAAvB,CAA4B,CAAC,CAAD,EAAI,OAAJ,CAA5B,CADJ,CADG;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgB;AAACC,EAAAA,CAAC,EAAEC,KAAJ;AAAWC,EAAAA,CAAC,EAAEC;AAAd,CAAhB,KAAyC;AACnE,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACM,SAAP,CAAiBC,MAArC,EAA6CH,CAAC,IAAI,CAAlD,EAAoD;AAChD,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBG,MAAxC,EAAgDL,CAAC,IAAI,CAArD,EAAuD;AACnD;AACA,UAAIF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBF,CAApB,KAA0B,CAA9B,EAAgC;AAC5B;AACA,YAAI,CAACD,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAN,IACA,CAACJ,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBC,KAAnD,CADD,IAEAF,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBC,KAAnD,EAA0D,CAA1D,MAAiE,OAFrE,EAGC;AACG,iBAAO,IAAP;AACH,SAP2B,CAQ5B;;AACH,OAXkD,CAYnD;;AACH;AACJ;AAEJ,CAlBM","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () => \n    Array.from(Array(STAGE_HEIGHT), () =>\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    );\n\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\n    for (let y = 0; y < player.tetromino.length; y += 1){\n        for (let x = 0; x < player.tetromino[y].length; x += 1){\n            // Check if the cell is 0 or filled\n            if (player.tetromino[y][x] != 0){\n                // Check if movement is within the game's height, width, and if cell is not clear\n                if (!stage[y + player.pos.y + moveY] || \n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ){\n                    return true;\n                }\n                // Check if the cell is set to clear\n            }\n            //\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}