{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nimport { STAGE_HEIGHT, STAGE_WIDTH } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  _s();\n\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((acc, row) => {\n      //If the row contains no zeroes\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return acc;\n      }\n\n      acc.push(row);\n      return acc;\n    }, []);\n\n    const updateStage = prevStage => {\n      //Flush stage - reset and rebuild\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); //Draw tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            console.log(y + player.pos.y);\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); //Draw ghost\n\n      console.log(player.tetromino.length); //let h = (player.name == 'S' || player.name == 'Z') ? player.tetromino.length - 1 : player.tetromino.length;\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[STAGE_HEIGHT - (y + player.pos.y)][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); //Check for collisions\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","STAGE_HEIGHT","STAGE_WIDTH","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","acc","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","console","log","pos","collided"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport {createStage} from '../gameHelpers';\nimport {STAGE_HEIGHT, STAGE_WIDTH } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const[stage, setStage] = useState(createStage());\n    const[rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => \n            newStage.reduce((acc, row) => {\n                //If the row contains no zeroes\n                if (row.findIndex(cell => cell[0]===0) === -1){\n                    setRowsCleared(prev => prev + 1);\n                    acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return acc;\n                }\n                acc.push(row);\n                return acc;\n            }, [])\n\n        const updateStage = prevStage => {\n            //Flush stage - reset and rebuild\n            const newStage = prevStage.map(row => \n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n            );\n\n            //Draw tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0){\n                        console.log(y+player.pos.y);\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged': 'clear'}`,\n                        ]; \n                    }\n                });\n            });\n\n            //Draw ghost\n            console.log(player.tetromino.length);\n            //let h = (player.name == 'S' || player.name == 'Z') ? player.tetromino.length - 1 : player.tetromino.length;\n\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0){\n                        newStage[STAGE_HEIGHT-(y + player.pos.y)][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged': 'clear'}`,\n                        ]; \n                    }\n                });\n            });\n\n            //Check for collisions\n            if (player.collided){\n                resetPlayer();\n                return sweepRows(newStage);\n            }\n\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev))\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared]; \n}"]},"metadata":{},"sourceType":"module"}