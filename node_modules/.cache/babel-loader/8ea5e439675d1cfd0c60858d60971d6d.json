{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { createHold } from '../gameHelpers';\nexport const useHold = () => {\n  _s();\n\n  //console.log(player);\n  //const[hold, setHold] = useState(createHold(player.tetromino.length, player.tetromino.length));\n  useEffect(() => {\n    const updateHold = prevHold => {\n      //Clear hold - reset and rebuild\n      const newHold = Array(player.tetromino.length).fill(0).map(row => new Array(player.tetromino.length).fill([0, 'clear']));\n      console.log(player.tetromino); // const newHold = prevHold.map(row => \n      //     row.map(cell => (cell[1] === [0, 'clear']))\n      // );\n      //Draw tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newHold[y][x] = [value, 'clear'];\n          }\n        });\n      });\n      return newHold;\n    };\n\n    setHold(prev => updateHold(prev));\n  }, [player]);\n  return [hold, setHold];\n};\n\n_s(useHold, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/useHold.js"],"names":["useState","useEffect","createHold","useHold","updateHold","prevHold","newHold","Array","player","tetromino","length","fill","map","row","console","log","forEach","y","value","x","setHold","prev","hold"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,UAAR,QAAyB,gBAAzB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB;AACA;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMG,UAAU,GAAGC,QAAQ,IAAI;AAC3B;AACA,YAAMC,OAAO,GAAGC,KAAK,CAACC,MAAM,CAACC,SAAP,CAAiBC,MAAlB,CAAL,CAA+BC,IAA/B,CAAoC,CAApC,EAAuCC,GAAvC,CAA2CC,GAAG,IAAI,IAAIN,KAAJ,CAAUC,MAAM,CAACC,SAAP,CAAiBC,MAA3B,EAAmCC,IAAnC,CAAwC,CAAC,CAAD,EAAI,OAAJ,CAAxC,CAAlD,CAAhB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACC,SAAnB,EAH2B,CAI3B;AACA;AACA;AAEA;;AACAD,MAAAA,MAAM,CAACC,SAAP,CAAiBO,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACjCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAgB;AACZZ,YAAAA,OAAO,CAACW,CAAD,CAAP,CAAWE,CAAX,IAAgB,CAACD,KAAD,EAAQ,OAAR,CAAhB;AACH;AACJ,SAJD;AAKH,OAND;AAQA,aAAOZ,OAAP;AACH,KAlBD;;AAoBAc,IAAAA,OAAO,CAACC,IAAI,IAAIjB,UAAU,CAACiB,IAAD,CAAnB,CAAP;AACH,GAtBQ,EAsBN,CAACb,MAAD,CAtBM,CAAT;AAwBA,SAAO,CAACc,IAAD,EAAOF,OAAP,CAAP;AACH,CA7BM;;GAAMjB,O","sourcesContent":["import {useState, useEffect} from 'react';\nimport {createHold} from '../gameHelpers';\n\nexport const useHold = () => {\n    //console.log(player);\n    //const[hold, setHold] = useState(createHold(player.tetromino.length, player.tetromino.length));\n\n    useEffect(() => {\n        const updateHold = prevHold => {\n            //Clear hold - reset and rebuild\n            const newHold = Array(player.tetromino.length).fill(0).map(row => new Array(player.tetromino.length).fill([0, 'clear']))\n            console.log(player.tetromino);\n            // const newHold = prevHold.map(row => \n            //     row.map(cell => (cell[1] === [0, 'clear']))\n            // );\n\n            //Draw tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0){\n                        newHold[y][x] = [value, 'clear']; \n                    }\n                });\n            });\n\n            return newHold;\n        };\n\n        setHold(prev => updateHold(prev))\n    }, [player]);\n\n    return [hold, setHold]; \n}"]},"metadata":{},"sourceType":"module"}