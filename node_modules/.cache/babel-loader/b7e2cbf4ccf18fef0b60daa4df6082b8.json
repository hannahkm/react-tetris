{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { TETROMINOS } from '../tetrominos';\nimport { checkCollision, STAGE_HEIGHT } from '../gameHelpers';\nexport const useGhost = (player, stage) => {\n  _s();\n\n  const [ghost, setGhost] = useState({\n    pos: {\n      x: 0,\n      y: 20\n    },\n    tetromino: player.tetromino,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // just transpose the matrix ig\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse rows to get rotated matrix\n\n    if (dir > 0) {\n      return rotatedTetro.map(row => row.reverse());\n    } else {\n      return rotatedTetro.reverse();\n    }\n  };\n\n  const ghostRotate = (stage, dir) => {\n    //make deep clone of ghost to prevent mutations\n    const clonedGhost = JSON.parse(JSON.stringify(ghost));\n    clonedGhost.tetromino = rotate(clonedGhost.tetromino, dir);\n    const pos = clonedGhost.pos.y;\n    rotate(clonedGhost.tetromino, -dir);\n\n    while (checkCollision(clonedGhost, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedGhost.pos.y -= 1;\n    }\n\n    setGhost(ghostRotate);\n  };\n\n  const updateGhostPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    let h = 0;\n\n    while (checkCollision(ghost, stage, {\n      x: 0,\n      y: 0\n    })) {\n      h -= 1;\n    }\n\n    setGhost(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: h\n      },\n      collided\n    }));\n  };\n\n  const resetGhost = (player, y) => {\n    console.log(player);\n    setGhost({\n      pos: {\n        x: player.pos.x,\n        y: y\n      },\n      tetromino: player.tetromino,\n      collided: player.pos.collided\n    });\n  };\n\n  return [ghost, updateGhostPos, resetGhost, ghostRotate];\n};\n\n_s(useGhost, \"2lMt/XXUn85i/TFz50Kf8Ny3gUI=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/useGhost.js"],"names":["useState","useEffect","TETROMINOS","checkCollision","STAGE_HEIGHT","useGhost","player","stage","ghost","setGhost","pos","x","y","tetromino","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","ghostRotate","clonedGhost","JSON","parse","stringify","updateGhostPos","h","prev","resetGhost","console","log"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport {TETROMINOS} from '../tetrominos';\nimport { checkCollision, STAGE_HEIGHT } from '../gameHelpers';\n\n\nexport const useGhost = (player, stage) => {\n    const [ghost, setGhost] = useState({\n        pos: {x: 0, y: 20},\n        tetromino: player.tetromino,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // just transpose the matrix ig\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]),);\n\n        //reverse rows to get rotated matrix\n        if (dir > 0) {\n            return rotatedTetro.map(row => row.reverse());\n        } else{\n            return rotatedTetro.reverse();\n        }\n    }\n\n    const ghostRotate = (stage, dir) => {\n        //make deep clone of ghost to prevent mutations\n        const clonedGhost = JSON.parse(JSON.stringify(ghost)); \n        clonedGhost.tetromino = rotate(clonedGhost.tetromino, dir);\n\n        const pos = clonedGhost.pos.y;\n        rotate(clonedGhost.tetromino, -dir);\n\n        while (checkCollision(clonedGhost, stage, {x: 0, y: 0})){\n            clonedGhost.pos.y -= 1;\n        }\n\n        setGhost(ghostRotate);\n\n    }\n\n    const updateGhostPos = ({x, y, collided}) => {\n        let h = 0;\n        while (checkCollision(ghost, stage, {x: 0, y: 0})){\n            h -= 1;\n        }\n        setGhost(prev => ({\n            ...prev,\n            pos: {x: (prev.pos.x += x), y: (h)},\n            collided,\n        }))\n    }\n\n    const resetGhost = (player, y) =>{\n        console.log(player);\n        setGhost({\n            pos: {x: player.pos.x, y: y},\n            tetromino: player.tetromino,\n            collided: player.pos.collided,\n        })\n    }\n\n    return [ghost, updateGhostPos, resetGhost, ghostRotate]; \n}"]},"metadata":{},"sourceType":"module"}