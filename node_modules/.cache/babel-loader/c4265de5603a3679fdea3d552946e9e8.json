{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { STAGE_WIDTH } from '../gameHelpers';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collideed: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // just transpose the matrix ig\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse rows to get rotated matrix\n\n    if (dir > 0) {\n      return rotatedTetro.map(row => row.reverse());\n    } else {\n      return rotatedTetro.reverse();\n    }\n  };\n\n  const playerRotate = (stage, dir) => {\n    //make deep clone of player to prevent mutations\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n\n_s(usePlayer, \"pVT26QjzOR7YA94J+2UmYfpXWQ0=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","STAGE_WIDTH","TETROMINOS","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collideed","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","updatePlayerPos","collided","prev","resetPlayer"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SAAQC,UAAR,EAAoBC,eAApB,QAA0C,eAA1C;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AACjCQ,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAE,CAAJ;AAAOC,MAAAA,CAAC,EAAE;AAAV,KAD4B;AAEjCC,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcS,KAFQ;AAGjCC,IAAAA,SAAS,EAAE;AAHsB,GAAD,CAApC;;AAMA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC5B;AACA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAcL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CAAzB,CAArB,CAF4B,CAI5B;;AACA,QAAIJ,GAAG,GAAG,CAAV,EAAa;AACT,aAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAIA,GAAG,CAACC,OAAJ,EAAxB,CAAP;AACH,KAFD,MAEM;AACF,aAAON,YAAY,CAACM,OAAb,EAAP;AACH;AACJ,GAVD;;AAYA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQT,GAAR,KAAgB;AACjC;AACA,UAAMU,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAevB,MAAf,CAAX,CAArB;AACAoB,IAAAA,YAAY,CAACf,SAAb,GAAyBG,MAAM,CAACY,YAAY,CAACf,SAAd,EAAyBK,GAAzB,CAA/B;AAEAT,IAAAA,SAAS,CAACmB,YAAD,CAAT;AAEH,GAPD;;AASA,QAAMI,eAAe,GAAG,CAAC;AAACrB,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOqB,IAAAA;AAAP,GAAD,KAAsB;AAC1CxB,IAAAA,SAAS,CAACyB,IAAI,KAAK,EACf,GAAGA,IADY;AAEfxB,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAGuB,IAAI,CAACxB,GAAL,CAASC,CAAT,IAAcA,CAAnB;AAAuBC,QAAAA,CAAC,EAAGsB,IAAI,CAACxB,GAAL,CAASE,CAAT,IAAcA;AAAzC,OAFU;AAGfqB,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAME,WAAW,GAAGhC,WAAW,CAAC,MAAK;AACjCM,IAAAA,SAAS,CAAC;AACNC,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAEP,WAAW,GAAC,CAAZ,GAAc,CAAlB;AAAqBQ,QAAAA,CAAC,EAAE;AAAxB,OADC;AAENC,MAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFvB;AAGNmB,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACzB,MAAD,EAASwB,eAAT,EAA0BG,WAA1B,EAAuCT,YAAvC,CAAP;AAEH,CA9CM;;GAAMnB,S","sourcesContent":["import {useState, useCallback} from 'react';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\nimport {TETROMINOS, randomTetromino} from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collideed: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // just transpose the matrix ig\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]),);\n\n        //reverse rows to get rotated matrix\n        if (dir > 0) {\n            return rotatedTetro.map(row => row.reverse());\n        } else{\n            return rotatedTetro.reverse();\n        }\n    }\n\n    const playerRotate = (stage, dir) => {\n        //make deep clone of player to prevent mutations\n        const clonedPlayer = JSON.parse(JSON.stringify(player)); \n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        setPlayer(clonedPlayer);\n\n    }\n\n    const updatePlayerPos = ({x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() =>{\n        setPlayer({\n            pos: {x: STAGE_WIDTH/2-2, y: 0},\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n\n}"]},"metadata":{},"sourceType":"module"}