{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n    name: '0'\n  });\n\n  const rotate = (matrix, dir) => {\n    // just transpose the matrix ig\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse rows to get rotated matrix\n\n    if (dir > 0) {\n      return rotatedTetro.map(row => row.reverse());\n    } else {\n      return rotatedTetro.reverse();\n    }\n  };\n\n  const playerRotate = (stage, dir) => {\n    //make deep clone of player to prevent mutations\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n\n  const swapPlayer = holdingPiece => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: holdingPiece.tetromino,\n      collided: false\n    });\n  };\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate, swapPlayer];\n};\n\n_s(usePlayer, \"7jWjAhvJ4naw7qh/4ePoy2Bz0co=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","checkCollision","STAGE_WIDTH","TETROMINOS","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","name","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer","swapPlayer","holdingPiece"],"mappings":"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","sourcesContent":["import {useState, useCallback} from 'react';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\n\nimport {TETROMINOS, randomTetromino} from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n        name: '0',\n    });\n\n    const rotate = (matrix, dir) => {\n        // just transpose the matrix ig\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]),);\n\n        //reverse rows to get rotated matrix\n        if (dir > 0) {\n            return rotatedTetro.map(row => row.reverse());\n        } else{\n            return rotatedTetro.reverse();\n        }\n    }\n\n    const playerRotate = (stage, dir) => {\n        //make deep clone of player to prevent mutations\n        const clonedPlayer = JSON.parse(JSON.stringify(player)); \n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while (checkCollision(clonedPlayer, stage, {x: 0, y: 0})){\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if (offset > clonedPlayer.tetromino[0].length){\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n\n    }\n\n    const updatePlayerPos = ({x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() =>{\n        setPlayer({\n            pos: {x: STAGE_WIDTH/2-2, y: 0},\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    const swapPlayer = (holdingPiece) => {\n        setPlayer({\n            pos: {x: STAGE_WIDTH/2-2, y: 0},\n            tetromino: holdingPiece.tetromino,\n            collided: false,\n        })\n    }\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate, swapPlayer];\n\n}"]},"metadata":{},"sourceType":"module"}