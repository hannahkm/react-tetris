{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { TETROMINOS } from '../tetrominos';\nimport { checkCollision, STAGE_HEIGHT } from '../gameHelpers';\nexport const useGhost = player => {\n  _s();\n\n  const [ghost, setGhost] = useState({\n    pos: {\n      x: 0,\n      y: 20\n    },\n    tetromino: player.tetromino,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // just transpose the matrix ig\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse rows to get rotated matrix\n\n    if (dir > 0) {\n      return rotatedTetro.map(row => row.reverse());\n    } else {\n      return rotatedTetro.reverse();\n    }\n  };\n\n  const ghostRotate = (stage, dir) => {\n    let yVal = 0;\n\n    while (!checkCollision(ghost, stage, {\n      x: 0,\n      y: yVal\n    })) {\n      yVal += 1;\n    }\n\n    ghost.pos.y += yVal;\n    console.log(\"made it out\");\n    setGhost(ghost);\n  };\n\n  const updateGhostPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    // let h = 0;\n    // while (checkCollision(ghost, stage, {x: 0, y: 0})){\n    //     h -= 1;\n    // }\n    setGhost(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetGhost = (player, y) => {\n    console.log(player);\n    setGhost({\n      pos: {\n        x: player.pos.x,\n        y: y\n      },\n      tetromino: player.tetromino,\n      collided: player.pos.collided\n    });\n  };\n\n  return [ghost, updateGhostPos, resetGhost, ghostRotate];\n};\n\n_s(useGhost, \"2lMt/XXUn85i/TFz50Kf8Ny3gUI=\");","map":{"version":3,"sources":["/Users/hannah/Desktop/github projects/react-tetris/src/hooks/useGhost.js"],"names":["useState","useEffect","TETROMINOS","checkCollision","STAGE_HEIGHT","useGhost","player","ghost","setGhost","pos","x","y","tetromino","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","ghostRotate","stage","yVal","console","log","updateGhostPos","prev","resetGhost"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,UAAR,QAAyB,eAAzB;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,gBAA7C;AAGA,OAAO,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC;AAC/BS,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAE,CAAJ;AAAOC,MAAAA,CAAC,EAAE;AAAV,KAD0B;AAE/BC,IAAAA,SAAS,EAAEN,MAAM,CAACM,SAFa;AAG/BC,IAAAA,QAAQ,EAAE;AAHqB,GAAD,CAAlC;;AAMA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC5B;AACA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAcL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CAAzB,CAArB,CAF4B,CAI5B;;AACA,QAAIJ,GAAG,GAAG,CAAV,EAAa;AACT,aAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAIA,GAAG,CAACC,OAAJ,EAAxB,CAAP;AACH,KAFD,MAEM;AACF,aAAON,YAAY,CAACM,OAAb,EAAP;AACH;AACJ,GAVD;;AAYA,QAAMC,WAAW,GAAG,CAACC,KAAD,EAAQT,GAAR,KAAgB;AAChC,QAAIU,IAAI,GAAG,CAAX;;AACA,WAAO,CAACvB,cAAc,CAACI,KAAD,EAAQkB,KAAR,EAAe;AAACf,MAAAA,CAAC,EAAE,CAAJ;AAAOC,MAAAA,CAAC,EAAEe;AAAV,KAAf,CAAtB,EAAsD;AAClDA,MAAAA,IAAI,IAAI,CAAR;AACH;;AACDnB,IAAAA,KAAK,CAACE,GAAN,CAAUE,CAAV,IAAee,IAAf;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEApB,IAAAA,QAAQ,CAACD,KAAD,CAAR;AAEH,GAXD;;AAaA,QAAMsB,cAAc,GAAG,CAAC;AAACnB,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOE,IAAAA;AAAP,GAAD,KAAsB;AACzC;AACA;AACA;AACA;AACAL,IAAAA,QAAQ,CAACsB,IAAI,KAAK,EACd,GAAGA,IADW;AAEdrB,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAGoB,IAAI,CAACrB,GAAL,CAASC,CAAT,IAAcA,CAAnB;AAAuBC,QAAAA,CAAC,EAAGmB,IAAI,CAACrB,GAAL,CAASE,CAAT,IAAcA;AAAzC,OAFS;AAGdE,MAAAA;AAHc,KAAL,CAAL,CAAR;AAKH,GAVD;;AAYA,QAAMkB,UAAU,GAAG,CAACzB,MAAD,EAASK,CAAT,KAAc;AAC7BgB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,MAAZ;AACAE,IAAAA,QAAQ,CAAC;AACLC,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAEJ,MAAM,CAACG,GAAP,CAAWC,CAAf;AAAkBC,QAAAA,CAAC,EAAEA;AAArB,OADA;AAELC,MAAAA,SAAS,EAAEN,MAAM,CAACM,SAFb;AAGLC,MAAAA,QAAQ,EAAEP,MAAM,CAACG,GAAP,CAAWI;AAHhB,KAAD,CAAR;AAKH,GAPD;;AASA,SAAO,CAACN,KAAD,EAAQsB,cAAR,EAAwBE,UAAxB,EAAoCP,WAApC,CAAP;AACH,CAtDM;;GAAMnB,Q","sourcesContent":["import {useState, useEffect} from 'react';\nimport {TETROMINOS} from '../tetrominos';\nimport { checkCollision, STAGE_HEIGHT } from '../gameHelpers';\n\n\nexport const useGhost = (player) => {\n    const [ghost, setGhost] = useState({\n        pos: {x: 0, y: 20},\n        tetromino: player.tetromino,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // just transpose the matrix ig\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]),);\n\n        //reverse rows to get rotated matrix\n        if (dir > 0) {\n            return rotatedTetro.map(row => row.reverse());\n        } else{\n            return rotatedTetro.reverse();\n        }\n    }\n\n    const ghostRotate = (stage, dir) => {\n        let yVal = 0;\n        while (!checkCollision(ghost, stage, {x: 0, y: yVal})){\n            yVal += 1;\n        }\n        ghost.pos.y += yVal;\n\n        console.log(\"made it out\");\n\n        setGhost(ghost);\n\n    }\n\n    const updateGhostPos = ({x, y, collided}) => {\n        // let h = 0;\n        // while (checkCollision(ghost, stage, {x: 0, y: 0})){\n        //     h -= 1;\n        // }\n        setGhost(prev => ({\n            ...prev,\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetGhost = (player, y) =>{\n        console.log(player);\n        setGhost({\n            pos: {x: player.pos.x, y: y},\n            tetromino: player.tetromino,\n            collided: player.pos.collided,\n        })\n    }\n\n    return [ghost, updateGhostPos, resetGhost, ghostRotate]; \n}"]},"metadata":{},"sourceType":"module"}